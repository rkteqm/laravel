php artisan make:controller RegistrationController // basic controlller
php artisan make:controller SingleActionController --invokable // Single Action Controller
php artisan make:controller ProductController --resource // Resource Controller
php artisan make:component Input // For creating Input component
php artisan config:Cache // For clearing cache
php artisan make:migration create_customers_table // For magrate customers table
php artisan migrate:rollback // for rollback previous migration
php artisan make:migration add_coloumns_to_customers_table // 
php artisan migrate // for create migration
php artisan make:model Customer // for creating model
php artisan make:model Product --migration // creating model as well as migration of Product 
composer dump-autoload // use this command after creating custom_helper and including it in composer.json file
php artisan make:seeder CustomerSeeder //craete CustomerSeeder.php file Database/Seeders/CustomerSeeder.php
php artisan db:seed // after write insert code run this command for start seeding
php artisan stub:publish // it is used to publish stub and customizing stub
composer create-project laravel/laravel AdminUserAuthSystem
composer require laravel/breeze
php artisan breeze:install
php artisan migrate
php artisan make:model Admin -m


fzzqlzhifeggkqmz


Date->/17/april/2023/
custom helper
composer dump-autoload // use this command after creating custom_helper and including it in composer.json file

mutator and accessor
mutator-> modify data saving into databse.
accessor-> modify data after accessing from database

soft deletes/deleted_at using migration
php artisan make:migration add_deleted_at_to_customers_table
adding namespace in Customer model -> use Illuminate\Database\Eloquent\SoftDeletes;
Adding in Customer Class of customer model -> use SoftDeletes;
withTrashed() => all(deleted + not_deleted)
onlyTrashed() => only_deleted(deleted)
restore() => for retriving deleted data
forceDelete() => for permanent delete
composer require laravel/ui   // for authentication
php artisan ui bootstrap // for authentication
sudo npm install
sudo npm run dev
php artisan config:cache // while changing language in app.php file run this command

Date->/18/april/2023/Tuesday
Faker & seeder
Faker is used for produce fake data ex:- 'name', 'email' etc.
Seeder is used for create new data or multiple new data;

php artisan make:seeder CustomerSeeder //create CustomerSeeder.php file Database/Seeders/CustomerSeeder.php
php artisan db:seed // after write insert code run this command for start seeding

search functionality in laravel
public function index(Request $request)
    {
        $search = $request['search'] ?? "";
        if($search != ""){
            // $customers = Customer::where('name', '=', $search)->get(); //search only exact match
            // $customers = Customer::where('name', 'LIKE', "%$search")->get(); //search exact match of letter at the end
            // $customers = Customer::where('name', 'LIKE', "%$search%")->get(); //search anywhere in the name
            $customers = Customer::where('name', 'LIKE', "%$search%")->orWhere('email', 'LIKE', "%$search%")->get(); //search anywhere in the name or email
        }else{
            $customers = Customer::all(); 
        }

        $data = compact('customers', 'search');
        return view('customer.index')->with($data);
    }
    
<form action="" class="col-9">
	<div class="form-group">
	    <input type="search" name="search" id="" class="form-control"
		placeholder="Search by name or email" aria-describedby="helpId" value="{{ $search }}">
	</div>
	<button class="btn btn-primary" type="submit">Search</button>
	<a href="{{ url('/customer') }}" class="btn btn-primary">Reset</a>
</form>

Authentication in laravel
composer require laravel/ui
php artisan ui bootstrap
sudo npm install
sudo npm run dev


fzzqlzhifeggkqmz


Date->/19/april/2023/Wednesday
Laravel localization
php artisan config:cache // while changing language in app.php file run this command

Laravel stub
// adding this index() function by customizing pain stub by using command " php artisan stub:publish"


hasOne and hasMany relation in laravel

Middleware in laravel
1. Global middleware
2. Route middleware
3. Group middleware


//for removing coloumn
public function up(): void
    {
        Schema::table('books', function (Blueprint $table) {
            $table->string('description')->after('isbn_no');
            $table->dropColumn('barcode');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('books', function (Blueprint $table) {
            $table->string('barcode');
        });
    }
    
 # for inserting multiple values old values in checkbox   
<div class="form-group col-6">
<label for="exampleInputCity1">Select Book Categories</label>
<span class="text-danger">
    @error('category')
        {{ $message }}
    @enderror
</span>
@php
    $string = $book->category;
    $catdb = explode(',', $string);
    $count = count($catdb);
@endphp
<!-- HTML code for the checkboxes -->
<div class="form-check">
    <div class="row ml-2">
        @foreach ($category as $cat)
            <div class="col-2">
                <input class="form-check-input"
                    @for ($i = 0; $i < $count; $i++) {{ $catdb[$i] == $cat->id ? 'checked' : '' }} @endfor
                    @if (is_array(old('category')) && in_array($cat->id, old('category'))) checked @endif type="checkbox"
                    name="category[]" value="{{ $cat->id }}" id="option1">
                <label class="">
                    {{ $cat->name }}
                </label>
            </div>
        @endforeach
    </div>
</div>
</div>    
